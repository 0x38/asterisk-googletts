#!/usr/bin/env perl

#
# AGI script that uses Google's translate text to speech engine.
#
# Copyright (C) 2011, Lefteris Zafiris
#
# This program is free software, distributed under the terms of
# the GNU General Public License Version 2. See the COPYING file
# at the top of the source tree.
#

use warnings;
use strict;
use File::Temp qw(tempfile);
use File::Copy;
use Digest::MD5 qw(md5_hex);
use LWP::UserAgent;

$| = 1;

my %AGI;

while(<STDIN>) {
	chomp;
	last if (!length($_));
	if (/^agi_(\w+)\:\s+(.*)$/) {
		$AGI{$1} = $2;
	}
}

my @text;
my $result;
my $filename;
my $url        = "http://translate.google.com/translate_tts";
my $lang       = $AGI{arg_2};
my $intkey     = $AGI{arg_3};
my $samplerate = 8000;
my $cachedir   = "/tmp";
my $usecache   = 1;

if (length($AGI{arg_1}) == 0) {
	print STDERR " -- googleTTS: No text passed for synthesis.\n";
	exit 0;
} elsif (length($AGI{arg_1}) > 100) {
	$AGI{arg_1} = $AGI{arg_1} . ".";
	@text = $AGI{arg_1} =~ /.{0,100}[.,!?;]|.{0,100}\W/gms;
} else {
	@text = ($AGI{arg_1});
}

#To be replaced with a signal handler
print "SET VARIABLE AGISIGHUP no\n";
$result = <STDIN>;
&checkresult($result);

print "ANSWER\n";
$result = <STDIN>;
&checkresult($result);

my $ua = LWP::UserAgent->new;
$ua->agent("Mozilla/5.0 (X11; Linux; rv:8.0) Gecko/20100101");
$ua->timeout(10);

foreach my $line (@text) {
	$line =~ s/^\s+|\s+$//g;
	last if (length($line) == 0);
	if ($usecache) {
		$filename = md5_hex($line);
		if (-e "$cachedir/$filename.sln") {
			print STDERR " -- googleTTS: File already in cache.\n";
			print "STREAM FILE $cachedir/$filename \"$intkey\"\n";
			$result = <STDIN>;
			&checkresult($result);
			next;
		}
	}
	$line =~ s/\s/+/g;
	my $request = HTTP::Request->new('GET' => "$url?tl=$lang&q=$line");
	my $response = $ua->request($request);
	if ($response->is_success) {
		my ($fh, $tmpname) = tempfile(
			"ggl_XXXXXXXX",
			TMPDIR => 1,
			UNLINK => 1
		);
		open($fh, ">", "$tmpname.mp3") or die "cannot open file: $!";
		print $fh $response->content;
		close $fh;
		system("mpg123 -w $tmpname.wav $tmpname.mp3 > /dev/null 2>&1");
		system("sox $tmpname.wav -t raw -r $samplerate $tmpname.sln > /dev/null 2>&1");
		print "STREAM FILE $tmpname \"$intkey\"\n";
		my $result = <STDIN>;
		&checkresult($result);
		if ($usecache) {
			print STDERR " -- googleTTS: Saving file to cache.\n";
			copy("$tmpname.sln", "$cachedir/$filename.sln");
		}
		unlink("$tmpname.wav", "$tmpname.mp3", "$tmpname.sln");
	} else {
		print STDERR " -- googleTTS: Failed to fetch file.\n";
	}
}

exit 0;

sub checkresult {
	my ($res) = @_;
	chomp $res;
	if ($res =~ /^200/) {
		$res =~ /result=(-?\d+)/;
		if (!length($1)) {
			print STDERR " -- googleTTS: fail: ($res)\n";
		} else {
			print STDERR " -- googleTTS: success: ($1)\n";
		}
	} else {
		print STDERR " -- googleTTS: unexpected result '$res'\n";
	}
}
